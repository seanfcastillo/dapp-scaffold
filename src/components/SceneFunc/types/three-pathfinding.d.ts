/** Declaration file generated by dts-gen */

import { Vector3 } from "three";

export class Pathfinding {
    constructor(...args: any[]);

    clampStep(t: any, a: any, c: any, u: any, l: any, d: any): any;

    findPath(...args: any[]): any;

    getClosestNode(...args: any[]): any;

    getGroup(zoneID: string, position: Vector3, checkPolygon: boolean = false): any;

    getRandomNode(...args: any[]): void;

    setZoneData(...args: any[]): void;

    static createZone(...args: any[]): void;

}

export class PathfindingHelper {
    constructor(...args: any[]);

    reset(...args: any[]): void;

    setNodePosition(...args: any[]): void;

    setPath(...args: any[]): void;

    setPlayerPosition(...args: any[]): void;

    setStepPosition(...args: any[]): void;

    setTargetPosition(...args: any[]): void;

    static DefaultMatrixAutoUpdate: boolean;

}

export namespace PathfindingHelper {
    namespace DefaultUp {
        const isVector3: boolean;

        const x: number;

        const y: number;

        const z: number;

        function add(...args: any[]): void;

        function addScalar(...args: any[]): void;

        function addScaledVector(...args: any[]): void;

        function addVectors(...args: any[]): void;

        function angleTo(...args: any[]): void;

        function applyAxisAngle(...args: any[]): void;

        function applyEuler(...args: any[]): void;

        function applyMatrix3(...args: any[]): void;

        function applyMatrix4(...args: any[]): void;

        function applyNormalMatrix(...args: any[]): void;

        function applyProjection(m: any): any;

        function applyQuaternion(...args: any[]): void;

        function ceil(...args: any[]): void;

        function clamp(...args: any[]): void;

        function clampLength(...args: any[]): void;

        function clampScalar(...args: any[]): void;

        function clone(...args: any[]): void;

        function copy(...args: any[]): void;

        function cross(...args: any[]): void;

        function crossVectors(...args: any[]): void;

        function distanceTo(...args: any[]): void;

        function distanceToManhattan(v: any): any;

        function distanceToSquared(...args: any[]): void;

        function divide(...args: any[]): void;

        function divideScalar(...args: any[]): void;

        function dot(...args: any[]): void;

        function equals(...args: any[]): void;

        function floor(...args: any[]): void;

        function fromArray(...args: any[]): void;

        function fromAttribute(attribute: any, index: any, offset: any): any;

        function fromBufferAttribute(...args: any[]): void;

        function getColumnFromMatrix(index: any, matrix: any): any;

        function getComponent(...args: any[]): void;

        function getPositionFromMatrix(m: any): any;

        function getScaleFromMatrix(m: any): any;

        function length(...args: any[]): void;

        function lengthManhattan(): any;

        function lengthSq(...args: any[]): void;

        function lerp(...args: any[]): void;

        function lerpVectors(...args: any[]): void;

        function manhattanDistanceTo(...args: any[]): void;

        function manhattanLength(...args: any[]): void;

        function max(...args: any[]): void;

        function min(...args: any[]): void;

        function multiply(...args: any[]): void;

        function multiplyScalar(...args: any[]): void;

        function multiplyVectors(...args: any[]): void;

        function negate(...args: any[]): void;

        function normalize(...args: any[]): void;

        function project(...args: any[]): void;

        function projectOnPlane(...args: any[]): void;

        function projectOnVector(...args: any[]): void;

        function random(...args: any[]): void;

        function randomDirection(...args: any[]): void;

        function reflect(...args: any[]): void;

        function round(...args: any[]): void;

        function roundToZero(...args: any[]): void;

        function set(...args: any[]): void;

        function setComponent(...args: any[]): void;

        function setEulerFromQuaternion(): void;

        function setEulerFromRotationMatrix(): void;

        function setFromCylindrical(...args: any[]): void;

        function setFromCylindricalCoords(...args: any[]): void;

        function setFromMatrix3Column(...args: any[]): void;

        function setFromMatrixColumn(...args: any[]): void;

        function setFromMatrixPosition(...args: any[]): void;

        function setFromMatrixScale(...args: any[]): void;

        function setFromSpherical(...args: any[]): void;

        function setFromSphericalCoords(...args: any[]): void;

        function setLength(...args: any[]): void;

        function setScalar(...args: any[]): void;

        function setX(...args: any[]): void;

        function setY(...args: any[]): void;

        function setZ(...args: any[]): void;

        function sub(...args: any[]): void;

        function subScalar(...args: any[]): void;

        function subVectors(...args: any[]): void;

        function toArray(...args: any[]): void;

        function transformDirection(...args: any[]): void;

        function unproject(...args: any[]): void;

    }

}

